# This file contains general application properties.
# All properties that are environment specific are in their related property file (like database login data, logging level, etc.).
# Currently active profile
spring.profiles.active=@activeSpringProfile@
spring.main.allow-bean-definition-overriding=true
# General app settings
server.port=8080
spring.mvc.locale=de_DE
spring.jackson.time-zone=Europe/Berlin
service.encryption.appkey=
# Logging: SLF4J (via Lombok)
logging.file.name=log/uploadservice.log
# Keycloak
keycloakService.user.role=user
keycloakService.consultant.role=consultant
keycloakService.user.dummyPrefix=@online-beratung.de
keycloakApi.error.email=User exists with same email
keycloakApi.error.username=User exists with same username
# Rocket.Chat
rocket.chat.header.auth.token=X-Auth-Token
rocket.chat.header.user.id=X-User-Id
rocket.chat.query.param.room.id=roomId
rocket.chat.form.param.msg=msg
rocket.chat.form.param.description=description
rocket.chat.form.param.tmid=tmid
rocket.chat.form.param.file=file
rocket.chat.api.url=<containername>:<port>/api/v1
rocket.chat.api.user.login=${rocket.chat.api.url}/login
rocket.chat.api.user.logout=${rocket.chat.api.url}/logout
rocket.chat.api.post.group.messages.read.url=${rocket.chat.api.url}/subscriptions.read
rocket.chat.api.rooms.upload.url=${rocket.chat.api.url}/rooms.upload
rocket.technical.username=
rocket.credentialscheduler.cron=0 0 0/1 * * ?
# Springfox/API documentation
springfox.docuTitle=Caritas Online Beratung: UploadService
springfox.docuDescription=Provides a REST API service to provide user information and actions.
springfox.docuVersion=0.0.1
springfox.docuTermsUrl=
springfox.docuContactName=
springfox.docuContactUrl=
springfox.docuContactEmail=
springfox.docuLicense=Apache 2.0
springfox.docuLicenseUrl=http://www.apache.org/licenses/LICENSE-2.0.html
springfox.docuPath=/uploads/docs
# UserService API
user.service.api.url=<containername>:<port>/users
user.service.api.new.message.notification=${user.service.api.url}/mails/messages/new
user.service.api.new.feedback.message.notification=${user.service.api.url}/mails/messages/feedback/new
user.service.api.liveproxy.url=<containername>:<port>
# CSRF token
csrf.header.property=
csrf.whitelist.header.property=
csrf.cookie.property=
# Upload
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=5MB
spring.servlet.multipart.max-request-size=7MB
spring.servlet.multipart.location=
upload.file.perday.limit=7
#Threshold after which files are written to disk.default is 0B
spring.servlet.multipart.file-size-threshold=50KB
# Task executor configuration
thread.executor.corePoolSize=10
thread.executor.maxPoolSize=15
thread.executor.queueCapacity=500
thread.executor.threadNamePrefix=UploadService-
# LIQUIBASE (LiquibaseProperties)
spring.datasource.url=jdbc:mariadb://<host>:<port>/uploadservice
spring.datasource.username=
spring.datasource.password=
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDB103Dialect
spring.liquibase.change-log=classpath:db/changelog/uploadservice-local-master.xml
spring.liquibase.user=
spring.liquibase.password=
spring.liquibase.default-schema=uploadservice

# RabbitMQ
spring.rabbitmq.host=rabbitmq
spring.rabbitmq.port=5672
spring.rabbitmq.username=admin
spring.rabbitmq.password=admin

# Statistics
statistics.enabled=false
statistics.rabbitmq.exchange.name=statistics.topic

# MIME type whitelist for file upload. Supports png, jpeg, doc, docx and pdf.
mime-type-whitelist={'image/png','image/jpeg','application/msword','application/vnd.openxmlformats-officedocument.wordprocessingml.document','application/pdf','application/x-tika-ooxml'}
cache.tenant.configuration.maxEntriesLocalHeap=100
cache.tenant.configuration.eternal=false
cache.tenant.configuration.timeToIdleSeconds=0
cache.tenant.configuration.timeToLiveSeconds=86400

multitenancy.enabled=false
tenant.service.api.url=
feature.multitenancy.with.single.domain.enabled=false
