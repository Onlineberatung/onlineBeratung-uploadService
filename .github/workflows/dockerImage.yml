name: Publish Docker image

on:
  push:
    tags:
      - 'dockerImage.v.*'

jobs:
  test:
    name: Build and run unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup JVM
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.10
          java-package: jdk
          architecture: x64

      - name: Caching maven dependencies
        uses: actions/cache@v1
        env:
          cache-name: cache-maven-dependencies
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
      - name: Maven Package
        run: mvn -B -Pprod  clean package -DskipTests
      - name: Maven Verify
        run: mvn -B -Pprod clean verify
      - uses: actions/upload-artifact@v2
        with:
          name: targetfiles
          path: target/*.jar
  push_to_registry:
    strategy:
      matrix:
        registry: [ "docker.pkg.github.com", "ghcr.io" ]
    needs: [ test ]
    name: Push Docker image to GitHub Packages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download buildfiles artifact
        uses: actions/download-artifact@v2
        with:
          name: targetfiles
      - name: Prepare Docker variables
        run: |
          echo "DOCKER_REGISTRY=$(echo "${{ matrix.registry }}/${{ github.repository }}" | awk '{print tolower($0)}')" >> $GITHUB_ENV
          echo "DOCKER_IMAGE=$(echo "${{ github.repository }}" | awk -F / '{print tolower($2)}')" >> $GITHUB_ENV
        shell: bash
      - name: Push to GitHub Packages
        uses: docker/build-push-action@v1.1.1
        with:
          username: ${{ secrets.GH_PACKAGE_RELEASE_USER }}
          password: ${{ secrets.GH_PACKAGE_RELEASE_TOKEN }}
          registry: ${{ env.DOCKER_REGISTRY }}
          repository: ${{ env.DOCKER_IMAGE }}
          tag_with_ref: true
